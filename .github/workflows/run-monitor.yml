# 工作流的名称，会显示在GitHub的Actions页面上
name: Daily Data Monitor

# 触发工作流的条件
on:
  # 条件一：按计划执行
  schedule:
    # 使用cron语法，'0 1 * * *' 代表在每天的UTC时间1点0分执行。
    # UTC时间1点相当于北京时间早上9点。
    - cron: '0 1 * * *'
  # 条件二：允许手动触发
  # 这让我们可以随时在Actions页面点击一个按钮来测试运行，非常方便。
  workflow_dispatch:

# 定义工作流包含的任务
jobs:
  # 我们只有一个任务，把它命名为 build
  build:
    # 指定任务运行的虚拟环境，'ubuntu-latest' 是一个稳定且免费的Linux环境
    runs-on: ubuntu-latest
    # 定义这个任务需要执行的一系列步骤
    steps:
    # 第1步：检出代码
    # 'uses'关键字表示使用一个社区已经做好的、可复用的Action
    # 'actions/checkout@v4'的作用是把我们仓库里的代码下载到当前的虚拟环境中
    - uses: actions/checkout@v4

    # 第2步：设置Python环境
    # 'actions/setup-python@v5' 会帮我们安装指定版本的Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        # 指定Python版本，最好与我们本地开发时使用的版本保持一致
        python-version: '3.10'

    # 第3步：安装依赖库
    # 'run'关键字表示直接执行一行或多行命令行命令
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt # 从requirements.txt文件中安装所有需要的库

    # 第4步：运行我们的监控脚本
    - name: Run data monitor
      # 'env'关键字用于设置环境变量，这是我们安全使用Secrets的关键
      env:
        # 将GitHub Secrets中的值，赋值给名为SENSORS_API_SECRET的环境变量
        SENSORS_API_SECRET: ${{ secrets.SENSORS_API_SECRET }}
        DINGTALK_WEBHOOK_URL: ${{ secrets.DINGTALK_WEBHOOK_URL }}
      # 执行我们的Python脚本
      run: python monitor.py
